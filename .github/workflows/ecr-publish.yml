name: ECR Dependencies and Push Images
on:
  workflow_call:
    inputs:
      revision:
        description: "The revision number to use for construction (computed from the Dockerfile if not provided)"
        required: false
        type: string
      arkcase:
        description: "The ArkCase version to use for construction (computed from the Dockerfile if not provided)"
        required: false
        type: string
      reports-bucket:
        description: "The bucket into which to upload the STIG Compliance and Vulnerability reports (defaults to 'arkcase-container-scan-results')"
        required: false
        type: string
        default: "arkcase-container-scan-results"

      big-container-size:
        description: "The size threshold a container image must match or pass (in MB) to be considered big, and thus trigger extra disk space clearing for security testing (defaults to 2048)"
        required: false
        type: string
        default: "2048"

      compliance-scan:
        description: "Whether or not to scan for STIG compliance on the build"
        required: false
        type: boolean
        # Start of false, for testing...
        default: true
      compliance-required:
        description: "Whether or not to require full STIG compliance to approve the build (default false)"
        required: false
        type: boolean
        default: false

      vulnerabilities-scan:
        description: "Whether or not to scan for vulnerabilities on the build"
        required: false
        type: boolean
        default: true
      vulnerabilities-required:
        description: "Whether or not to require no CRIT or HIGH vulnerabilities to approve the build (default false)"
        required: false
        type: boolean
        default: false

    secrets:
      ECR_AWS_REGION:
        required: true
      ECR_AWS_ORG_ID:
        required: true
      ECR_AWS_ACCESS_KEY:
        required: true
      ECR_AWS_ACCOUNT_ID:
        required: true
      ECR_AWS_SECRET_ACCESS_KEY:
        required: true
      ALF_QUAY_IO_USERNAME:
        required: false
      ALF_QUAY_IO_PASSWORD:
        required: false
      CURL_ENCRYPTION_KEY:
        required: false
      CURL_AUTH_FILE:
        required: false
      CURL_USERNAME:
        required: false
      CURL_PASSWORD:
        required: false
      MVN_GET_ENCRYPTION_KEY:
        required: false
      MVN_GET_USERNAME:
        required: false
      MVN_GET_PASSWORD:
        required: false

env:
  ECR_AWS_REGION: ${{ secrets.ECR_AWS_REGION }}
  ECR_AWS_ORG_ID: ${{ secrets.ECR_AWS_ORG_ID }}
  GH_TOKEN: ${{ github.token }}

  SCANNER_IMAGE: "arkcase/security-scanner:20240927.01"
  BIG_CONTAINER_SIZE: ${{ inputs.big-container-size }}

  # Enable/disable STIG Compliance Scans
  SCAN_COMP: ${{ inputs.compliance-scan }}
  SCAN_COMP_REQUIRED: ${{ inputs.compliance-required }}

  # Enable/disable Vulnerability Scans
  SCAN_VULN: ${{ inputs.vulnerabilities-scan }}
  SCAN_VULN_REQUIRED: ${{ inputs.vulnerabilities-required }}

jobs:
  ECR-Publishing:
    runs-on: ubuntu-latest
    steps:
      - name: Validate the parameters
        env:
          PARAM_REVISION: ${{ inputs.revision }}
          PARAM_ARKCASE: ${{ inputs.arkcase }}
        run: |
          if [ -n "${PARAM_REVISION}" ] ; then
              # Parse for vailidity ... we'll examine it more closely later
              if [[ ! "${PARAM_REVISION}" =~ ^((0|[1-9][0-9]*)([.][0-9]+)*)(-([a-zA-Z0-9-]+([.][a-zA-Z0-9-]+)*))?([+]([a-zA-Z0-9-]+))?$ ]] ; then
                  echo "Revision number is not valid: [${PARAM_REVISION}]"
                  exit 1
              fi
          fi

          if [ -n "${PARAM_ARKCASE}" ] ; then
              # Parse for vailidity ... we'll examine it more closely later
              if [[ ! "${PARAM_ARKCASE}" =~ ^((0|[1-9][0-9]*)([.][0-9]+)*)(-([a-zA-Z0-9-]+([.][a-zA-Z0-9-]+)*))?([+]([a-zA-Z0-9-]+))?$ ]] ; then
                  echo "ArkCase version is not valid: [${PARAM_ARKCASE}]"
                  exit 1
              fi
          fi

          # We only care if we're going to run a scan
          if [ "${SCAN_COMP}" == "true" ] || [ "${SCAN_VULN}" == "true" ] ; then
              if [[ ! "${BIG_CONTAINER_SIZE}" =~ ^[1-9][0-9]*$ ]] ; then
                  echo "The big-container-size parameter is not a valid number: [${BIG_CONTAINER_SIZE}]"
                  exit 1
              fi
          fi

      - name: Checkout source code
        uses: actions/checkout@v3

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          aws-secret-access-key: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ secrets.ECR_AWS_REGION }}
          mask-aws-account-id: ${{ secrets.ECR_AWS_ACCOUNT_ID }}

      - name: Initialize the environment file
        env:
          PARAM_REVISION: ${{ inputs.revision }}
          PARAM_ARKCASE: ${{ inputs.arkcase }}
        run: |
          # Start with a clean environment
          : > .env

          TIMESTAMP="$(date -u +%Y%m%d%H%M%S)"
          echo "export TIMESTAMP=${TIMESTAMP@Q}" >> .env
          echo "TIMESTAMP=${TIMESTAMP@Q}"

          echo "export PARAM_REVISION=${PARAM_REVISION@Q}" >> .env
          echo "PARAM_REVISION=${PARAM_REVISION@Q}"

          echo "export PARAM_ARKCASE=${PARAM_ARKCASE@Q}" >> .env
          echo "PARAM_ARKCASE=${PARAM_ARKCASE@Q}"

      - name: Docker Login to Alfresco Quay.IO (if applicable)
        env:
          ALF_QUAY_IO_USERNAME: ${{ secrets.ALF_QUAY_IO_USERNAME }}
          ALF_QUAY_IO_PASSWORD: ${{ secrets.ALF_QUAY_IO_PASSWORD }}
        run: |
          source .env
          cat .env

          if [ -v ALF_QUAY_IO_USERNAME ] && [ -v ALF_QUAY_IO_PASSWORD ] && [ -n "${ALF_QUAY_IO_USERNAME}" ] && [ -n "${ALF_QUAY_IO_PASSWORD}" ] ; then
              docker login -u "${ALF_QUAY_IO_USERNAME}" -p "${ALF_QUAY_IO_PASSWORD}" quay.io
          else
              [ -v ALF_QUAY_IO_USERNAME ] || [ -v ALF_QUAY_IO_PASSWORD ] && echo "These are the quay.io credentials given (sha256sum):"
              [ -v ALF_QUAY_IO_USERNAME ] && echo -e "\tUSERNAME: [$(echo -n "${ALF_QUAY_IO_USERNAME}" | sha256sum | awk '{ print $1 }')]"
              [ -v ALF_QUAY_IO_PASSWORD ] && echo -e "\tPASSWORD: [$(echo -n "${ALF_QUAY_IO_PASSWORD}" | sha256sum | awk '{ print $1 }')]"
              echo "The quay.io credentials were insufficient. Will not authenticate."
          fi

        # The AWS login needs to happen before the build b/c the
        # ECR_REGISTRY_PRIVATE value is computed here
      - name: Login to Amazon ECR (Private)
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

        # The AWS login needs to happen before the build b/c the
        # ECR_REGISTRY_PUBLIC value is computed here
      - name: Login to Amazon ECR (Public)
        id: login-ecr-public
        uses: aws-actions/amazon-ecr-login@v1
        with:
          registry-type: public

      - name: Identify the build's characteristics (visibility, version number, etc)
        env:
          ECR_REGISTRY_PRIVATE: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY_PUBLIC: ${{ steps.login-ecr-public.outputs.registry }}
        run: |
          source .env
          cat .env

          # Check to see the project's visibility
          # TODO: CHECK THE DOCKERFILE FOR A REQUEST (ARG) TO KEEP THE BUILD PRIVATE
          export PRIVATE="$(gh repo view --json isPrivate --jq .isPrivate)"
          export VISIBILITY="private"
          "${PRIVATE}" || VISIBILITY="public"

          echo "export VISIBILITY=${VISIBILITY@Q}" >> .env
          echo "VISIBILITY=${VISIBILITY@Q}"

          # Split into an array of parts, making sure that double slashes, if present, are condensed into one
          # Also remove leading and trailing slashes, for safety. Also, fold it to lowercase
          readarray -d / -t PARTS < <(echo -n "${GITHUB_REPOSITORY,,}" | sed -e "s;^/*;;g" -e "s;/*$;;g" -e "s;/\+;/;g")

          # So at this point we know that PARTS[0] is the product suite (ArkCase, for instance), and PARTS[1] is the
          # repository name (i.e. ark_something-or-other)
          # Change out underscores for dashes
          export PRODUCT_SUITE="${PARTS[0]//_/-}"
          export IMAGE_NAME="${PARTS[1]//_/-}"

          # Also, to support more product suites in the future...
          case "${PRODUCT_SUITE}" in
              "arkcase" ) IMAGE_NAME="$(echo -n "${IMAGE_NAME}" | sed -e "s;^ark-;;g")" ;;
          esac

          echo "export PRODUCT_SUITE=${PRODUCT_SUITE@Q}" >> .env
          echo "PRODUCT_SUITE=${PRODUCT_SUITE@Q}"
          echo "export IMAGE_NAME=${IMAGE_NAME@Q}" >> .env
          echo "IMAGE_NAME=${IMAGE_NAME@Q}"

          export IMAGE_URI="${PRODUCT_SUITE}/${IMAGE_NAME}"
          echo "export IMAGE_URI=${IMAGE_URI@Q}" >> .env
          echo "IMAGE_URI=${IMAGE_URI@Q}"

          # Make sure it's defined if it isn't already
          REVISION="${PARAM_REVISION}"
          ARKCASE_VER="${PARAM_ARKCASE}"
          if [ -z "${REVISION}" ] || [ -z "${ARKCASE_VER}" ] ; then
              # Parse out the tag, handle the case when it's not there
              readarray -t NEW_VERSIONS < <(
                  set -eo pipefail

                  # Parsing out the version from the "VER" argument can be tricky if it's computed from others
                  # values or arguments, so let's try it with some sneaky trickery.

                  # We have to resort to Perl's evil black magic b/c we have to cover the edge case of
                  # line continuations - we have to collapse those, first... then we can find the ARG clauses,
                  # and finally convert them all into bash "export" clauses ... which we then consume (this is
                  # why redefinition is an issue, above). We use a PREFIX to avoid name clashes with read-only
                  # BASH variables which can cause the task to fail, and we use special SED strings to add the
                  # prefix as necessary for variable expansion among the arguments themselves
                  export PREFIX="____DOCKER_ARG____"

                  # It's OK to define these here ... if they get overridden below, we're happy about it.
                  # Otherwise, we fall back to these values to avoid failing the parse.
                  eval export "${PREFIX}PRIVATE_REGISTRY=${ECR_REGISTRY_PRIVATE@Q}"
                  eval export "${PREFIX}PUBLIC_REGISTRY=${ECR_REGISTRY_PUBLIC@Q}"
                  eval export "${PREFIX}BASE_REGISTRY=${ECR_REGISTRY_PRIVATE@Q}"

                  source <(
                      perl -pe "s/\\\s*$//" Dockerfile | \
                          egrep '^[[:space:]]*ARG[[:space:]]+[^=]+=' | \
                          sed -e "s;\${;\$\{${PREFIX};g" \
                              -e "s;\$\([^{]\);\$${PREFIX}\1;g" | \
                          sed -e "s;^\s*ARG\s;export ${PREFIX};g"
                  )

                  for R in "VER" "ARKCASE_VER" ; do
                      [ -z "${PREFIX}" ] || R="${PREFIX}${R}"
                      # This checks for each variable and outputs its
                      # value if present, or an empty string if absent
                      [ -v "${R}" ] && echo "${!R}" || echo ""
                  done
                  exit 0
              )
              RC=${?}

              if [ ${RC} -ne 0 ] ; then
                  echo "Failed to compute the build version from the Dockerfile (rc=${RC})"
                  exit ${RC}
              fi

              # We only override the revision if it wasn't provided as a parameter
              if [ -z "${REVISION}" ] ; then
                  if [ -z "${NEW_VERSIONS[0]}" ] ; then
                      echo "Failed to compute a build revision from the Dockerfile"
                      exit 1
                  fi
                  REVISION="${NEW_VERSIONS[0]}"
              fi

              # We only override the ArkCase version if it wasn't provided as a parameter
              [ -z "${ARKCASE_VER}" ] && ARKCASE_VER="${NEW_VERSIONS[1]}"

              echo "Computed REVISION=${REVISION}"
              echo "Computed ARKCASE_VER=${ARKCASE_VER}"
          fi

          # Parse for vailidity ... we'll examine it more closely later
          #
          # This is inspired by, but not strictly adhering to, semantic versioning. It deviates
          # in the following ways:
          #
          #     * Leading zeros are allowed on all but the first component of the version number
          #     * More than 3 dot-separated components are allowed on the version number
          #
          # Otherwise, the rest is the same: same rules for pre-release tags and metadata tags.
          if [[ ! "${REVISION}" =~ ^((0|[1-9][0-9]*)([.][0-9]+)*)(-([a-zA-Z0-9-]+([.][a-zA-Z0-9-]+)*))?([+]([a-zA-Z0-9-]+))?$ ]] ; then
              echo "Revision number is not valid: [${REVISION}]"
              exit 1
          fi

          BASE_NUMBER="${BASH_REMATCH[1]}"
          PRERELEASE="${BASH_REMATCH[5]}"
          METADATA="${BASH_REMATCH[8]}"

          # If the pre-release info is a "SNAPSHOT", make sure it's used properly
          REVISION_SNAPSHOT="false"
          if [[ "${PRERELEASE}" =~ SNAPSHOT ]] ; then
              if [[ "${PRERELEASE}" =~ (^|[^a-zA-Z0-9_])SNAPSHOT ]] ; then
                  REVISION_SNAPSHOT="true"
              else
                  echo "Illegal use of the word 'SNAPSHOT' as [${PRERELASE}] - must be the last word: [${REVISION}]"
                  exit 1
              fi
          fi

          # Do the same validation, but for the ArkCase version
          if [ -n "${ARKCASE_VER}" ] ; then
              if [[ ! "${ARKCASE_VER}" =~ ^((0|[1-9][0-9]*)([.][0-9]+)*)(-([a-zA-Z0-9-]+([.][a-zA-Z0-9-]+)*))?([+]([a-zA-Z0-9-]+))?$ ]] ; then
                  echo "ArkCase version is not valid: [${ARKCASE_VER}]"
                  exit 1
              fi

              ACM_BASE_NUMBER="${BASH_REMATCH[1]}"
              ACM_PRERELEASE="${BASH_REMATCH[5]}"
              ACM_METADATA="${BASH_REMATCH[8]}"

              # If the pre-release info is a "SNAPSHOT", make sure it's used properly
              ACM_SNAPSHOT="false"
              if [[ "${ACM_PRERELEASE}" =~ SNAPSHOT ]] ; then
                  if [[ "${ACM_PRERELEASE}" =~ (^|[^a-zA-Z0-9_])SNAPSHOT ]] ; then
                      ACM_SNAPSHOT="true"
                  else
                      echo "Illegal use of the word 'SNAPSHOT' as [${PRERELASE}] - must be the last word: [${ARKCASE_VER}]"
                      exit 1
                  fi
              fi

              # Make sure that the quality level of the ArkCase build is
              # equal to or higher than the quality level for the inteded
              # revision (i.e. don't let SNAPSHOT builds be used as the basis
              # for production builds)
              if "${REVISION_SNAPSHOT}" ; then
                  REVISION_QUALITY="0"
              elif [ -n "${PRERELEASE}" ] ; then
                  REVISION_QUALITY="1"
              else
                  REVISION_QUALITY="2"
              fi
              echo "REVISION_QUALITY=${REVISION_QUALITY}"

              if "${ACM_SNAPSHOT}" ; then
                  ACM_QUALITY="0"
              elif [ -n "${ACM_PRERELEASE}" ] ; then
                  ACM_QUALITY="1"
              else
                  ACM_QUALITY="2"
              fi
              echo "ACM_QUALITY=${ACM_QUALITY}"

              if [ ${REVISION_QUALITY} -gt ${ACM_QUALITY} ] ; then
                  echo "The target revision quality (${REVISION_QUALITY}) is higher than the base ArkCase quality (${ACM_QUALITY}), and this is not allowed"
                  exit 1
              fi
          fi

          # Assume the default is "devel", until proven otherwise
          export ENVIRONMENT="devel"
          export PREFIX="devel-"
          # This makes it easier to add special branch handlers later on
          case "${GITHUB_REF}" in
              "refs/heads/main" | "refs/tags/release"/* ) ENVIRONMENT="stable" ; PREFIX="" ;;
          esac
          echo "export ENVIRONMENT=${ENVIRONMENT@Q}" >> .env
          echo "ENVIRONMENT=${ENVIRONMENT@Q}"

          echo "export REVISION_PREFIX=${PREFIX@Q}" >> .env
          echo "REVISION_PREFIX=${PREFIX@Q}"

          echo "export REVISION=${REVISION@Q}" >> .env
          echo "export REVISION_BASE_NUMBER=${BASE_NUMBER@Q}" >> .env
          echo "export REVISION_PRERELEASE=${PRERELEASE@Q}" >> .env
          echo "export REVISION_METADATA=${METADATA@Q}" >> .env
          echo "export REVISION_SNAPSHOT=${REVISION_SNAPSHOT@Q}" >> .env
          echo "REVISION=${REVISION@Q}"
          echo "REVISION_BASE_NUMBER=${BASE_NUMBER@Q}"
          echo "REVISION_PRERELEASE=${PRERELEASE@Q}"
          echo "REVISION_METADATA=${METADATA@Q}"
          echo "REVISION_SNAPSHOT=${REVISION_SNAPSHOT@Q}"

          if [ -n "${ARKCASE_VER}" ] ; then
              echo "export ARKCASE_VER=${ARKCASE_VER@Q}" >> .env
              echo "export ACM_BASE_NUMBER=${ACM_BASE_NUMBER@Q}" >> .env
              echo "export ACM_PRERELEASE=${ACM_PRERELEASE@Q}" >> .env
              echo "export ACM_METADATA=${ACM_METADATA@Q}" >> .env
              echo "export ACM_SNAPSHOT=${ACM_SNAPSHOT@Q}" >> .env
              echo "ARKCASE_VER=${ARKCASE_VER@Q}"
              echo "ACM_BASE_NUMBER=${ACM_BASE_NUMBER@Q}"
              echo "ACM_PRERELEASE=${ACM_PRERELEASE@Q}"
              echo "ACM_METADATA=${ACM_METADATA@Q}"
              echo "ACM_SNAPSHOT=${ACM_SNAPSHOT@Q}"
          fi

          # We only push to public if this is a public repository,
          # AND this build is not a pre-release build
          export PUSH_TO_PUBLIC="false"
          [ "${ENVIRONMENT}" == "stable" ] && [ "${VISIBILITY}" == "public" ] && [ -z "${PRERELEASE}" ] && PUSH_TO_PUBLIC="true"
          echo "export PUSH_TO_PUBLIC=${PUSH_TO_PUBLIC@Q}" >> .env
          echo "PUSH_TO_PUBLIC=${PUSH_TO_PUBLIC@Q}"

      - name: Build the Docker image
        env:
          ECR_REGISTRY_PRIVATE: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY_PUBLIC: ${{ steps.login-ecr-public.outputs.registry }}
          ECR_AWS_REGION: ${{ secrets.ECR_AWS_REGION }}
          ECR_AWS_ACCESS_KEY: ${{ secrets.ECR_AWS_ACCESS_KEY }}
          ECR_AWS_SECRET_ACCESS_KEY: ${{ secrets.ECR_AWS_SECRET_ACCESS_KEY }}
          CURL_ENCRYPTION_KEY: ${{ secrets.CURL_ENCRYPTION_KEY }}
          CURL_AUTH_FILE: ${{ secrets.CURL_AUTH_FILE }}
          CURL_USERNAME: ${{ secrets.CURL_USERNAME }}
          CURL_PASSWORD: ${{ secrets.CURL_PASSWORD }}
          MVN_GET_ENCRYPTION_KEY: ${{ secrets.MVN_GET_ENCRYPTION_KEY }}
          MVN_GET_AUTH_FILE: ${{ secrets.MVN_GET_AUTH_FILE }}
          MVN_GET_USERNAME: ${{ secrets.MVN_GET_USERNAME }}
          MVN_GET_PASSWORD: ${{ secrets.MVN_GET_PASSWORD }}
        run: |
          source .env
          cat .env

          # Set any build arguments with private values
          export BUILD_ARGS=()

          # Always use the base version for this ...
          BUILD_ARGS+=(--build-arg "VER=${REVISION}")
          [ -n "${ARKCASE_VER:-}" ] && BUILD_ARGS+=(--build-arg "ARKCASE_VER=${ARKCASE_VER}")

          # Select the base registries
          BUILD_ARGS+=(--build-arg "PRIVATE_REGISTRY=${ECR_REGISTRY_PRIVATE}")
          BUILD_ARGS+=(--build-arg "PUBLIC_REGISTRY=${ECR_REGISTRY_PUBLIC}")
          BUILD_ARGS+=(--build-arg "BASE_VER_PFX=${REVISION_PREFIX}")

          # Select which one is the BASE registry, based on whether this
          # container is to be pushed to public or not
          BASE_REGISTRY="${ECR_REGISTRY_PRIVATE}"
          "${PUSH_TO_PUBLIC}" && BASE_REGISTRY="${ECR_REGISTRY_PUBLIC}"
          BUILD_ARGS+=(--build-arg "BASE_REGISTRY=${BASE_REGISTRY}")

          # Next, add all the stuff S3 will need to pull crap
          BUILD_ARGS+=(--build-arg "AWS_ACCESS_KEY_ID=${ECR_AWS_ACCESS_KEY}")
          BUILD_ARGS+=(--build-arg "AWS_SECRET_ACCESS_KEY=${ECR_AWS_SECRET_ACCESS_KEY}")
          BUILD_ARGS+=(--build-arg "AWS_REGION=${ECR_AWS_REGION}")

          # Add the Maven and CURL authentication deetz
          for VAR in "${!CURL_@}" "${!MVN_GET_@}" ; do
              BUILD_ARGS+=(--build-arg "${VAR}=${!VAR}")
          done

          # Final details for more complete information
          BUILD_ARGS+=(--label "GIT_REPOSITORY=${GITHUB_REPOSITORY}")
          BUILD_ARGS+=(--label "GIT_REF=${GITHUB_REF_NAME}")
          BUILD_ARGS+=(--label "GIT_REF_TYPE=${GITHUB_REF_TYPE}")
          BUILD_ARGS+=(--label "GIT_COMMIT=${GITHUB_SHA}")
          BUILD_ARGS+=(--label "GIT_BUILD_NUMBER=${GITHUB_RUN_NUMBER}")
          BUILD_ARGS+=(--label "GIT_BUILD_TIMESTAMP=${TIMESTAMP}")

          COMMIT_COUNT="$(git rev-list --count HEAD)"
          BUILD_ARGS+=(--label "GIT_COMMIT_COUNT=${COMMIT_COUNT}")

          #
          # These are the revisions that will be built
          #    ${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}
          #    ${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}_b${GITHUB_RUN_NUMBER}${REVISION_METADATA}
          #    ${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}_b${GITHUB_RUN_NUMBER}-${TIMESTAMP}${REVISION_METADATA}
          #
          # The ordering of components is important for detemining who gets
          # the "latest" (or devel-latest) tag.
          #
          # The significance of components when comparing is:
          #
          #    * REVISION_BASE_NUMBER
          #    * GITHUB_RUN_NUMBER
          #    * TIMESTAMP
          #    * REVISION_METADATA
          #
          # We don't take into account the pre-release stuff b/c those will never get tagged as
          # "latest" because they're *pre-release* artifacts (this includes SNAPSHOT artifacts).
          #
          # This also applies to "devel" artifacts, since these aren't inteded to be public. However,
          # we do have a "devel-latest" which can be useful.
          #

          # If we have a pre-release tag, pre-pend a dash
          [ -n "${REVISION_PRERELEASE}" ] && REVISION_PRERELEASE="-${REVISION_PRERELEASE}"

          # This will house all the different revisions by which this
          # artifact will be known
          REVISIONS=()

          # NOTE: we use "_" instead of "+" as the revision metadata
          # separator here b/c the plus sign is not permitted in Docker tags

          # The first metadata must be appended with a leading underscore
          REVISIONS+=("${REVISION_PREFIX}${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}${REVISION_METADATA:+_}${REVISION_METADATA}")

          # For the other builds, if there's any metadata, it will need a dash up front
          [ -n "${REVISION_METADATA}" ] && REVISION_METADATA="-${REVISION_METADATA}"

          # This is an intermediate revision with a little more build metadata
          REVISIONS+=("${REVISION_PREFIX}${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}_b${GITHUB_RUN_NUMBER}${REVISION_METADATA}")

          # This is the most exact revision, which will be used for "latest" computation
          EXACT_REVISION="${REVISION_PREFIX}${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}_b${GITHUB_RUN_NUMBER}-${TIMESTAMP}${REVISION_METADATA}"
          REVISIONS+=("${EXACT_REVISION}")

          TARGETS=()
          TARGETS+=("${ECR_REGISTRY_PRIVATE}/${IMAGE_URI}")
          "${PUSH_TO_PUBLIC}" && TARGETS+=("${ECR_REGISTRY_PUBLIC}/${IMAGE_URI}")

          # Set the build tags to be built. Make sure to cover
          # both targets if applicable
          TAGS=()
          echo "export BUILDS=()" >> .env
          for T in "${TARGETS[@]}" ; do
              for R in "${REVISIONS[@]}" ; do
                  BUILD="${T}:${R}"
                  echo "BUILDS+=(${BUILD@Q})" >> .env
                  TAGS+=("${BUILD}")
              done
          done

          # We only compute the need for a "latest" tag if
          # this is not a pre-release artifact.
          if [ -z "${REVISION_PRERELEASE}" ] ; then
              #
              # Identify if we need to bear the tag of "latest" per the
              # version precedence rules laid out above
              #

              # Since we know we won't have any pre-release stuff, we can
              # construct this selector regex to not allow any pre-release
              # information on the tags. We don't really care about metadata
              # since it's the LAST component to be taken into account, and
              # it most likely will never come into play since the timestamp
              # will almost assuredly NEVER coincide.
              RE_REVISION_SELECTOR="^${REVISION_PREFIX}[^-]+_b[0-9]+-[1-9][0-9]{13}"
              JQ_FIND_IMAGE_TAGS='.imageDetails[] | select(has("imageTags")) | .imageTags[]'

              # For re-use...
              LATEST="${REVISION_PREFIX}latest"
              LATEST_ADDED="false"

              # First, check the private revisions, ingoring pre-release stuff
              LATEST_PRV="$(
                  (
                      # We print out our latest revision so they get sorted properly
                      # alongside all other revisions. This way the post-processing
                      # sort+grep+head will yield the revision that should carry the
                      # "latest" moniker
                      echo "${EXACT_REVISION}"
                      aws ecr describe-images --repository-name "${IMAGE_URI}" | \
                          jq -r "${JQ_FIND_IMAGE_TAGS}"
                  ) | \
                  egrep "${RE_REVISION_SELECTOR}" | \
                  sort --reverse --version-sort --unique | \
                  head -1
              )"
              if [ "${LATEST_PRV}" == "${EXACT_REVISION}" ] ; then
                  BUILD="${ECR_REGISTRY_PRIVATE}/${IMAGE_URI}:${LATEST}"
                  echo "BUILDS+=(${BUILD@Q})" >> .env
                  TAGS+=("${BUILD}")
                  "${LATEST_ADDED}" || REVISIONS+=("${LATEST}")
                  LATEST_ADDED="true"
              fi

              if "${PUSH_TO_PUBLIC}" ; then
                  # Next, check the public one
                  LATEST_PUB="$(
                      (
                          # We print out our latest revision so they get sorted properly
                          # alongside all other revisions. This way the post-processing
                          # sort+grep+head will yield the revision that should carry the
                          # "latest" moniker
                          echo "${EXACT_REVISION}"
                          aws ecr-public describe-images --repository-name "${IMAGE_NAME}" | \
                              jq -r "${JQ_FIND_IMAGE_TAGS}"
                      ) | \
                      egrep "${RE_REVISION_SELECTOR}" | \
                      sort --reverse --version-sort --unique | \
                      head -1
                  )"
                  if [ "${LATEST_PUB}" == "${EXACT_REVISION}" ] ; then
                      BUILD="${ECR_REGISTRY_PUBLIC}/${IMAGE_URI}:${LATEST}"
                      echo "BUILDS+=(${BUILD@Q})" >> .env
                      TAGS+=("${BUILD}")
                      "${LATEST_ADDED}" || REVISIONS+=("${LATEST}")
                      LATEST_ADDED="true"
                  fi
              fi
          fi

          # We only build to a single tag b/c the security scanner pukes otherwise
          # (don't ask XD). We instead create out-of-band tags for the container
          # image. This is OK, b/c the "AUTHORITATIVE_TAG" is the most exact tag
          # that describes this specific build being executed right this second,
          # and as such can be used as the tag's canonical name.
          #
          # We do it like this to avoid having to modify the "docker push"
          # section, below.
          AUTHORITATIVE_TAG="${ECR_REGISTRY_PRIVATE}/${IMAGE_URI}:${EXACT_REVISION}"
          echo "AUTHORITATIVE_TAG=${AUTHORITATIVE_TAG@Q}" >> .env
          (
              set -x
              docker build "${BUILD_ARGS[@]}" -t "${AUTHORITATIVE_TAG}" .
          ) || exit ${?}

          # Once the build succeeds, we create the required tags as appropriate
          if [ -z "${REVISION_PRERELEASE}" ] ; then
              PREFIX="release"
          elif "${REVISION_SNAPSHOT}" ; then
              PREFIX="snapshot"
          else
              PREFIX="test"
          fi

          # If we want to tag the repository, do so! Clobber any existing tags!
          echo "Creating Git tags for: ${REVISIONS[@]}"
          for R in "${REVISIONS[@]}" ; do
              # Tags for GIT must be the *real* revision, with "+" instead of "_"
              git tag --force "${PREFIX}/${R//_/+}"
          done

          # We only care about container size if we're running security scanning
          BIG_CONTAINER="false"
          if [ "${SCAN_COMP}" == "true" ] || [ "${SCAN_VULN}" == "true" ] ; then
              # Identify the image size (in MB), and check to see if it qualifies as a "Big Container" (rounded up)
              SIZE="$(docker image inspect "${AUTHORITATIVE_TAG}" | jq -r "([.[].Size] | add) / (1024 * 1024) | ceil")"
              [ ${SIZE} -ge ${BIG_CONTAINER_SIZE} ] && BIG_CONTAINER="true"
          fi
          echo "BIG_CONTAINER=${BIG_CONTAINER}" >> "${GITHUB_ENV}"

          REPORT_TARGET_PATH="${IMAGE_URI}/${REVISION_PREFIX}${REVISION_BASE_NUMBER}${REVISION_PRERELEASE}/b${GITHUB_RUN_NUMBER}-${TIMESTAMP}${REVISION_METADATA}"

          COMP_REPORT_PATTERN="compliance.*"
          COMP_REPORT_XML_SOURCE="compliance.xml"
          COMP_REPORT_HDF_SOURCE="compliance.hdf"
          COMP_REPORT_HTML_SOURCE="compliance.html"
          COMP_REPORT_SARIF_SOURCE="compliance.sarif"

          VULN_REPORT_PATTERN="vulnerabilities.*"
          VULN_REPORT_HTML_SOURCE="vulnerabilities.html"
          VULN_REPORT_SARIF_SOURCE="vulnerabilities.sarif"

          VARS=(
              AUTHORITATIVE_TAG
              REPORT_TARGET_PATH

              COMP_REPORT_PATTERN
              COMP_REPORT_XML_SOURCE
              COMP_REPORT_HDF_SOURCE
              COMP_REPORT_HTML_SOURCE
              COMP_REPORT_SARIF_SOURCE

              VULN_REPORT_PATTERN
              VULN_REPORT_HTML_SOURCE
              VULN_REPORT_SARIF_SOURCE
          )

          for VAR in "${VARS[@]}" ; do
              VAL="${!VAR}"
              echo "${VAR}=${VAL@Q}" >> .env
              echo "${VAR}=${VAL}" >> "${GITHUB_ENV}"
          done

      - name: Clear out extra disk space for security scans due to a large container image
        uses: jlumbroso/free-disk-space@main
        if: ${{ env.BIG_CONTAINER == 'true' }}
        with:
          docker-images: false

      - name: Scan for STIG compliance
        if: ${{ env.SCAN_COMP == 'true' }}
        continue-on-error: ${{ env.SCAN_COMP_REQUIRED != 'true' }}
        env:
          ECR_REGISTRY_PRIVATE: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY_PUBLIC: ${{ steps.login-ecr-public.outputs.registry }}
        run: |
          source .env
          cat .env

          set -euo pipefail

          echo "Launching the Compliance Scan for ${AUTHORITATIVE_TAG}..."

          RESULTS_MOUNT="$(readlink -f ".")"
          DOCKER_SOCKET="/var/run/docker.sock"
          CMD=(
              docker run 
                  --rm
                  --name compliance-scanner
                  --volume "${DOCKER_SOCKET}:${DOCKER_SOCKET}"
                  --volume "${RESULTS_MOUNT}:/results"
                  "${ECR_REGISTRY_PRIVATE}/${SCANNER_IMAGE}" \
                      compliance "${AUTHORITATIVE_TAG}"
          )
          # Run the command!
          EXIT_CODE=0
          echo "Launching: ${CMD[@]@Q}"
          "${CMD[@]}" || EXIT_CODE=${?}
          case "${EXIT_CODE}" in
              0 | 2 ) exit 0 ;;
              * ) exit ${EXIT_CODE} ;;
          esac

      - name: Upload the STIG compliance report to the GitHub Artifacts tab
        if: ${{ hashFiles(env.COMP_REPORT_XML_SOURCE) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: "compliance"
          path: ${{ env.COMP_REPORT_PATTERN }}

      - name: Upload the STIG compliance report to the GitHub Security tab
        if: ${{ hashFiles(env.COMP_REPORT_XML_SOURCE) != '' }}
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.COMP_REPORT_SARIF_SOURCE }}
          category: stig-compliance

      - name: Upload the STIG compliance report to S3
        if: ${{ hashFiles(env.COMP_REPORT_XML_SOURCE) != '' }}
        env:
          REPORTS_BUCKET: ${{ inputs.reports-bucket }}
        run: |
          source .env
          cat .env
          COUNT=0
          while read SRC ; do
              echo "Uploading [${SRC}] to [s3://${REPORTS_BUCKET}/${REPORT_TARGET_PATH}]..."
              aws s3 cp "${SRC}" "s3://${REPORTS_BUCKET}/${REPORT_TARGET_PATH}/${SRC}"
              (( ++COUNT ))
          done < <(find . -mindepth 1 -maxdepth 1 -type f -name "${COMP_REPORT_PATTERN}" | sort | cut -c3-)
          [ ${COUNT} -eq 0 ] || echo "Uploaded ${COUNT} report(s)!"

      - name: Scan for vulnerabilities
        if: ${{ env.SCAN_VULN == 'true' }}
        continue-on-error: ${{ env.SCAN_VULN_REQUIRED != 'true' }}
        env:
          ECR_REGISTRY_PRIVATE: ${{ steps.login-ecr.outputs.registry }}
          ECR_REGISTRY_PUBLIC: ${{ steps.login-ecr-public.outputs.registry }}
        run: |
          source .env
          cat .env

          set -euo pipefail

          echo "Launching the Vulnerability Scan for ${AUTHORITATIVE_TAG}..."

          RESULTS_MOUNT="$(readlink -f ".")"
          DOCKER_SOCKET="/var/run/docker.sock"
          CMD=(
              docker run 
                  --rm
                  --name vulnerability-scanner
                  --volume "${DOCKER_SOCKET}:${DOCKER_SOCKET}"
                  --volume "${RESULTS_MOUNT}:/results"
                  "${ECR_REGISTRY_PRIVATE}/${SCANNER_IMAGE}" \
                      vulnerabilities "${AUTHORITATIVE_TAG}"
          )
          # Run the command!
          EXIT_CODE=0
          echo "Launching: ${CMD[@]@Q}"
          "${CMD[@]}" || EXIT_CODE=${?}
          case "${EXIT_CODE}" in
              0 | 2 ) exit 0 ;;
              * ) exit ${EXIT_CODE} ;;
          esac

      - name: Upload the vulnerabilities report to the GitHub artifacts tab
        if: ${{ hashFiles(env.VULN_REPORT_SARIF_SOURCE) != '' }}
        uses: actions/upload-artifact@v4
        with:
          name: "vulnerabilities"
          path: ${{ env.VULN_REPORT_PATTERN }}

      - name: Upload the vulnerabilities report to the GitHub Security tab
        if: ${{ hashFiles(env.VULN_REPORT_SARIF_SOURCE) != '' }}
        continue-on-error: true
        uses: github/codeql-action/upload-sarif@v3
        with:
          sarif_file: ${{ env.VULN_REPORT_SARIF_SOURCE }}
          category: vulnerabilities

      - name: Upload the vulnerabilities report to S3
        if: ${{ hashFiles(env.VULN_REPORT_SARIF_SOURCE) != '' }}
        env:
          REPORTS_BUCKET: ${{ inputs.reports-bucket }}
        run: |
          source .env
          cat .env
          COUNT=0
          while read SRC ; do
              echo "Uploading [${SRC}] to [s3://${REPORTS_BUCKET}/${REPORT_TARGET_PATH}]..."
              aws s3 cp "${SRC}" "s3://${REPORTS_BUCKET}/${REPORT_TARGET_PATH}/${SRC}"
              (( ++COUNT ))
          done < <(find . -mindepth 1 -maxdepth 1 -type f -name "${VULN_REPORT_PATTERN}" | sort | cut -c3-)
          [ ${COUNT} -eq 0 ] || echo "Uploaded ${COUNT} report(s)!"

      - name: Push the new tags
        run: |
          source .env
          cat .env

          # We split this up b/c if this build doesn't pass the security scan,
          # it won't be uploaded or tagged (eventually :D)
          git push --force --tags

      - name: Create Private ECR Repo
        run: |
          source .env
          cat .env

          # All images have private repositories
          echo "Creating the private repository for ${IMAGE_URI}..."
          aws ecr create-repository \
             --repository-name "${IMAGE_URI}" \
             --region "${ECR_AWS_REGION}" \
             --image-tag-mutability MUTABLE \
             --image-scanning-configuration scanOnPush=true  \
             --encryption-configuration encryptionType="AES256" || true

      - name: Create Public ECR Repo (if applicable)
        run: |
          source .env
          cat .env
          "${PUSH_TO_PUBLIC}" || exit 0

          IMAGE_REAL_URI="${IMAGE_URI}"
          [[ "${IMAGE_URI}" =~ ^arkcase/(.*)$ ]] && IMAGE_REAL_URI="${BASH_REMATCH[1]}"
          echo "Creating the public repository for ${IMAGE_URI} (as ${IMAGE_REAL_URI})..."
          aws ecr-public create-repository \
             --repository-name "${IMAGE_REAL_URI}" \
             --region "${ECR_AWS_REGION}" || true

      - name: Create Access Permissions
        run: |
          source .env
          cat .env

          cat << POL_STATEMENT > ecr_read_policy.json
          {
            "Version": "2012-10-17",
            "Statement": [
              {
                "Sid": "org-ecr-read",
                "Effect": "Allow",
                "Principal": "*",
                "Action": [
                  "ecr:BatchCheckLayerAvailability",
                  "ecr:BatchGetImage",
                  "ecr:DescribeImageScanFindings",
                  "ecr:DescribeImages",
                  "ecr:DescribeRepositories",
                  "ecr:GetDownloadUrlForLayer",
                  "ecr:GetLifecyclePolicy",
                  "ecr:GetLifecyclePolicyPreview",
                  "ecr:GetRepositoryPolicy",
                  "ecr:ListImages",
                  "ecr:ListTagsForResource"
                ],
                "Condition": {
                  "ForAnyValue:StringEquals": {
                    "aws:PrincipalOrgID": [
                      "${ECR_AWS_ORG_ID}"
                    ]
                  }
                }
              },
              {
                  "Sid": "vendor-ecr-read",
                  "Effect": "Allow",
                  "Principal": {
                      "AWS": "arn:aws:iam::076340917683:root"
                  },
                  "Action": [
                      "ecr:BatchCheckLayerAvailability",
                      "ecr:BatchGetImage",
                      "ecr:DescribeImageScanFindings",
                      "ecr:DescribeImages",
                      "ecr:DescribeRepositories",
                      "ecr:GetDownloadUrlForLayer",
                      "ecr:GetLifecyclePolicy",
                      "ecr:GetLifecyclePolicyPreview",
                      "ecr:GetRepositoryPolicy",
                      "ecr:ListImages",
                      "ecr:ListTagsForResource"
                  ]
              }
            ]
          }
          POL_STATEMENT

      - name: Update Repository Permissions
        run: |
          source .env
          cat .env

          echo "${IMAGE_URI}"
          aws ecr set-repository-policy \
              --region "${ECR_AWS_REGION}" \
              --repository-name "${IMAGE_URI}" \
              --policy-text file://ecr_read_policy.json

      - name: Create Lifecycle Policy
        run: |
          source .env
          cat .env

          cat << LIFECYCLE_STATEMENT > ecr_lifecycle_policy.json
          {
            "rules": [
              {
                "rulePriority": 100,
                "description": "Keep untagged images only 1 day",
                "selection": {
                  "tagStatus": "untagged",
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 1
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 200,
                "description": "Keep only the top-level SNAPSHOTS built in the past 30 days",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPatternList": [ "*-SNAPSHOT" ],
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 30
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 300,
                "description": "Keep only fresh-built SNAPSHOT tags that AREN'T the top-level SNAPSHOTs, pushed in the last 5 days",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPatternList": [ "*-SNAPSHOT_b*" ],
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 5
                },
                "action": {
                  "type": "expire"
                }
              },
              {
                "rulePriority": 400,
                "description": "Keep only fresh-built devel-* tags that AREN'T the top-level SNAPSHOTs, pushed in the last 15 days",
                "selection": {
                  "tagStatus": "tagged",
                  "tagPatternList": [ "devel-*" ],
                  "countType": "sinceImagePushed",
                  "countUnit": "days",
                  "countNumber": 15
                },
                "action": {
                  "type": "expire"
                }
              }
            ]
          }
          LIFECYCLE_STATEMENT

      - name: Update Repository Lifecycle Policy
        run: |
          source .env
          cat .env

          cat ecr_lifecycle_policy.json
          aws ecr put-lifecycle-policy \
              --region "${ECR_AWS_REGION}" \
              --repository-name "${IMAGE_URI}" \
              --lifecycle-policy-text file://ecr_lifecycle_policy.json

      - name: Publish Docker image
        run: |
          source .env
          cat .env

          # Iterate over the array of built artifacts, and push them
          for BUILD in "${BUILDS[@]}" ; do
              echo "Pushing [${BUILD}] ..."
              [ "${AUTHORITATIVE_TAG}" == "${BUILD}" ] || docker tag "${AUTHORITATIVE_TAG}" "${BUILD}"
              docker push "${BUILD}"
          done
